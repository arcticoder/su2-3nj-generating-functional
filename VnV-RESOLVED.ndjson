{"task":"Compute and verify Wigner 6-j symbol values","priority":"High","python_snippet":"import sympy as sp\\nfrom sympy.physics.wigner import wigner_6j\\nresult = wigner_6j(sp.Rational(1,2), sp.Rational(1,2), 1, sp.Rational(1,2), sp.Rational(1,2), 1)\\nassert result == sp.Rational(-1,6), 'Expected -1/6'"}
{"task":"Validate Biedenharnâ€“Elliott identity numerically","priority":"High","python_snippet":"import sympy as sp\\nfrom sympy.physics.wigner import wigner_6j\\njs = [sp.Rational(1)]*6\\nj1,j2,j3,j4,j5,j6 = js\\nk_min = max(abs(j1-j2), abs(j3-j4), abs(j6-j1))\\nk_max = min(j1+j2, j3+j4, j6+j1)\\nlhs = sp.Rational(0)\\nfor x in range(int(k_min), int(k_max)+1):\\n    xr = sp.Rational(x)\\n    phase = (-1)**(j1+j2+j3+j4+xr)\\n    lhs += phase*(2*xr+1) * wigner_6j(j1,j2,xr, j3,j4,j5) * wigner_6j(j3,j4,xr, j6,j1,j5) * wigner_6j(j6,j1,xr, j2,j3,j4)\\nrhs = wigner_6j(j2,j6,j3, j4,j5,j1) * wigner_6j(j6,j2,j4, j3,j5,j1)\\nassert sp.simplify(lhs - rhs) == 0"}
{"task":"Test SU(2) 3nj generating functional against reference data","priority":"High","python_snippet":"import json\\nfrom project.su2_3nj import generate_3nj\\nwith open('tests/reference_3nj.json') as f:\\n    ref = json.load(f)\\nfor key, expected in ref.items():\\n    js = list(map(int, key.split(',')))\\n    result = generate_3nj(*js)\\n    assert result == expected, f'Mismatch for {key}: {result} != {expected}'"}
{"task":"Regression test for numeric relativity solver using Minkowski solution","priority":"Medium","python_snippet":"import numpy as np\\nfrom project.numeric_relativity import solve_metric, compute_ricci_scalar\\nmetric = solve_metric(initial_data='minkowski')\\nricci = compute_ricci_scalar(metric)\\nassert np.allclose(ricci, 0, atol=1e-8)"}
{"task":"Stability integration test for warp-bubble metric perturbations","priority":"High","python_snippet":"import numpy as np\\nfrom project.warp_driving import warp_metric, evolve_metric\\nbase = warp_metric(params)\\nperturbed = base * (1 + 1e-6*np.random.randn(*base.shape))\\nevolved_base = evolve_metric(base, dt=0.01, steps=100)\\nevolved_perturbed = evolve_metric(perturbed, dt=0.01, steps=100)\\nerror = np.max(np.abs(evolved_perturbed - evolved_base))\\nassert error < 1e-3"}
{"task":"Benchmark Runge-Kutta integrator accuracy vs time-step size","priority":"Medium","python_snippet":"import numpy as np\\nfrom project.integrator import runge_kutta4, analytic_solution\\nerrors = {}\\nfor dt in [1e-1, 1e-2, 1e-3, 1e-4]:\\n    sol_num = runge_kutta4(func, y0, t0, t1, dt)\\n    sol_exact = analytic_solution(np.linspace(t0, t1, int((t1-t0)/dt)+1))\\n    errors[dt] = np.max(np.abs(sol_num - sol_exact))\\nprint(errors)"}
{"task":"Cross-check 3nj symbol recursion relations via symbolic computation","priority":"Medium","python_snippet":"import sympy as sp\\nfrom project.su2_3nj import generate_3nj, recursion_3nj\\njs = [1, 2, 3, 4, 5, 6]\\nval_direct = generate_3nj(*js)\\nval_rec = recursion_3nj(*js)\\nassert sp.simplify(val_direct - val_rec) == 0"}
{"task":"Ensure reproducibility of Monte Carlo sampling routines","priority":"Low","python_snippet":"import numpy as np\\nfrom project.monte_carlo import sample_points\\nnp.random.seed(42)\\na = sample_points(1000)\\nnp.random.seed(42)\\nb = sample_points(1000)\\nassert np.array_equal(a, b)"}
